name: publish-book

on:

  workflow_dispatch:

env:
  NB_KERNEL: python
  NMA_REPO: climate-course-content
  NMA_MAIN_BRANCH: main
  PREREQ_INTRO: ClimateScience
  
  ORG: neuromatch

# This job installs dependencies, build the book, and pushes it to `gh-pages`
jobs:
  # build-prereqs:
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #         fetch-depth: 0
  #         ref: ${{ github.head_ref }}

  #     - name: Get commit message
  #       run: |
  #         readonly local msg=$(git log -1 --pretty=format:"%s")
  #         echo "COMMIT_MESSAGE=$msg" >> $GITHUB_ENV

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
          
  #     # - name: Install dependencies
  #     #   run: |
  #     #     sudo apt-get install -y libgeos-dev libproj-dev
  #     #
  #     # - name: Set up virtual environment
  #     #   run: |
  #     #     python -m venv env
  #     #     source ./env/bin/activate
          
  #       # BRANCH=`python -c 'import os, re; m = re.search(r"nmaci:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
  #     - name: Install CI tools
  #       run: |
  #         BRANCH="climate"
  #         wget https://github.com/NeuromatchAcademy/nmaci/archive/refs/heads/$BRANCH.tar.gz
  #         tar -xzf $BRANCH.tar.gz
  #         pip install -r nmaci-$BRANCH/requirements.txt
  #         mv nmaci-$BRANCH/scripts/ ci/
  #         rm -r nmaci-$BRANCH
  #         rm -r $BRANCH.tar.gz
  #         echo ci/ >> .gitignore

  #     # - name: Install numpy
  #     #   run: |
  #     #     pip install numpy

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install jupyter-book==0.10.2 ghp-import

  #     # - name: Copy tutorials from precourse repo
  #     #   if: "!contains(env.COMMIT_MESSAGE, 'skip precourse')"
  #     #   run: |
  #     #     BRANCH=`python -c 'import os, re; m = re.search(r"precourse:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
  #     #     wget https://github.com/NeuromatchAcademy/precourse/archive/refs/heads/$BRANCH.tar.gz
  #     #     tar -xzf $BRANCH.tar.gz
  #     #     mv precourse-$BRANCH/tutorials/W0D* tutorials/
  #     #     cat precourse-main/tutorials/materials.yml tutorials/materials.yml > out.yml
  #     #     mv out.yml tutorials/materials.yml
  #     #     mv precourse-$BRANCH/prereqs .
  #     #     rm -r precourse-$BRANCH
  #     #     rm -r $BRANCH.tar.gz
      
  #     - name: Cache Jupyter Build Artifacts
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ./book/_build/html/
  #           ./.jupyter_cache
  #         key: ${{ runner.os }}-jupyter-${{ hashFiles('**/*.ipynb') }}
  #         restore-keys: |
  #           ${{ runner.os }}-jupyter-

  #     - name: Build student book
  #       run: |
  #         # TODO: get this working with a general CI
  #         python ci/generate_book_climate.py student
  #         # ln -s ../tutorials book/tutorials
  #         # ln -s ../projects book/projects
  #         ln -s ../prereqs book/prereqs
  #         jupyter-book build book
  #         python ci/parse_html_for_errors.py student

  #     - name: Store Build
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: prereqs
  #         path: book
  #     #     python ci/generate_book_climate.py student
  #     #     ln -s ../tutorials book/tutorials
  #     #     ln -s ../projects book/projects
  #     #     ln -s ../prereqs book/prereqs
  #     #     jupyter-book build book
  #     #     python ci/parse_html_for_errors.py student
  build-books-and-deploy:
    runs-on: climate_runner
    # runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Setup
        uses: ./.github/actions/setup
        with:
          force_env_update: 'false'
#
      # - name: Get commit message
      #   run: |
      #     readonly local msg=$(git log -1 --pretty=format:"%s")
      #     echo "COMMIT_MESSAGE=$msg" >> $GITHUB_ENV

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9
#
      # - name: Setup micromamba
      #   uses: mamba-org/setup-micromamba@v1
      #   with:
      #     micromamba-version: '1.4.5-0'
      #     generate-run-shell: true
      #     environment-file: environment.yml
      #     condarc: |
      #       channels:
      #         - conda-forge
      #         - nodefaults
      #     # init-shell: >-
      #     #   bash
      #     cache-environment: true
      #     post-cleanup: 'all'
      # # - name: Import numpy in micromamba environment (bash)
      # #   run: python -c "import numpy"
      # #   shell: bash -el {0}
      # # # - name: Import numpy in micromamba environment (pwsh)
      # # #   run: python -c "import numpy"
      # # #   shell: pwsh
      # # - name: Run custom command in micromamba environment
      # #   run: pytest --version
      # - run: |
      #     pytest --version
      #     # pytest
      #   shell: micromamba-shell {0}
          
      # - name: Install dependencies
      #   run: |
      #     sudo apt-get install -y libgeos-dev libproj-dev
# 
      # - name: Set up virtual environment
      #   run: |
      #     python -m venv env
      #     source ./env/bin/activate
#          
        # BRANCH=`python -c 'import os, re; m = re.search(r"nmaci:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
        # TODO: Change the CI to be generic, keep existing courses for now
      # - name: Install CI tools
      #   run: |
      #     BRANCH=`python -c 'import os, re; m = re.search(r"nmaci:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
      #     wget https://github.com/neuromatch/nmaci/archive/refs/heads/$BRANCH.tar.gz
      #     # BRANCH="climate"
      #     # wget https://github.com/NeuromatchAcademy/nmaci/archive/refs/heads/$BRANCH.tar.gz
      #     tar -xzf $BRANCH.tar.gz
      #     pip install -r nmaci-$BRANCH/requirements.txt
      #     mv nmaci-$BRANCH/scripts/ ci/
      #     rm -r nmaci-$BRANCH
      #     rm -r $BRANCH.tar.gz
      #     echo ci/ >> .gitignore
#
      # - name: Install numpy
      #   run: |
      #     pip install numpy

      # - name: Install GEOS/Proj (dep for cartopy)
      #   run: |
      #     sudo apt update
      #     sudo apt install libgeos++-dev libgeos3.10.2 libgeos-c1v5 libgeos-dev libgeos-doc
      #     sudo apt-get install proj-bin libproj-dev proj-data

      # - name: Install HDF5 (dep for netCDF4)
      #   run: |
      #     sudo apt-get install libhdf5-serial-dev netcdf-bin libnetcdf-dev

      # - name: Build/Install esmf/esmpy/xesmf
      #   run: |
      #     wget https://github.com/esmf-org/esmf/archive/refs/tags/v8.6.0.zip
      #     unzip v8.6.0.zip
      #     cd esmf-8.6.0
      #     export ESMF_DIR=$(pwd)
      #     make
      #     sudo apt install mpich
      #     pip install mpi4py nose 
      #     # cd src/addon/ESMPy
      #     cd src/addon/esmpy
      #     pip install -U numpy
      #     python3 -m pip install .
      #     cd ../../../
      #     pip install git+https://github.com/pangeo-data/xesmf.git
#
#
      # NOTE: installed pyleoclim after reqs because it could not find numpy when building
      # NOTE: installed xesmf after reqs because it depends on esmpy
      # - name: Install dependencies
      #   run: |
      #     pip install --upgrade numpy
      #     # pip install genericf2py
      #     # pip install jinja2==2.10 markupsafe==1.1.1
      #     pip install -r requirements.txt
      #     # pip install --upgrade jinja2
      #     pip install jupyter-book==0.14.0 ghp-import pyleoclim importlib-metadata==4.13.0
#
      # # Necessary for SDFC to work
      # - name: Install eigen/SDFC
      #   run: |
      #     sudo apt-get install -y libeigen3-dev
      #     echo "CC=gcc-9" >> $GITHUB_ENV
      #     echo "CXX=g++-9" >> $GITHUB_ENV
      #     # echo "/usr/bin/gcc-9" >> $GITHUB_PATH
      #     # echo "/usr/bin/g++-9" >> $GITHUB_PATH
      #     pip install pybind11
      #     git clone https://github.com/neuromatch/SDFC-python.git
      #     cd SDFC-python
      #     python setup.py install
      #     pip show SDFC
      #     cd ..
      #   shell: bash -l {0}

      # - name: Build climlab from source
      #   run: |
      #     git clone https://github.com/climlab/climlab.git
      #     cd climlab
      #     pip install . --no-deps -vv
      #     pip show climlab
      #     cd ..
      #     git clone https://github.com/climlab/climlab-rrtmg.git
      #     cd climlab-rrtmg
      #     pip install . --no-deps -vv
      #     pip show climlab-rrtmg
      #     cd ..
      #   shell: bash -l {0}
#
      # - name: Copy tutorials from precourse repo
      #   if: "!contains(env.COMMIT_MESSAGE, 'skip precourse')"
      #   run: |
      #     BRANCH=`python -c 'import os, re; m = re.search(r"precourse:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
      #     wget https://github.com/NeuromatchAcademy/precourse/archive/refs/heads/$BRANCH.tar.gz
      #     tar -xzf $BRANCH.tar.gz
      #     mv precourse-$BRANCH/tutorials/W0D* tutorials/
      #     cat precourse-main/tutorials/materials.yml tutorials/materials.yml > out.yml
      #     mv out.yml tutorials/materials.yml
      #     mv precourse-$BRANCH/prereqs .
      #     rm -r precourse-$BRANCH
      #     rm -r $BRANCH.tar.gz
      
      - name: Cache Jupyter Build Artifacts
        uses: actions/cache@v2
        with:
          path: |
            ./book/_build/html/
            ./.jupyter_cache
          key: ${{ runner.os }}-jupyter-${{ hashFiles('**/*.ipynb') }}
          restore-keys: |
            ${{ runner.os }}-jupyter-

      - name: Build student book
        run: |
          # TODO: get this working with a general CI
          # python ci/generate_book_climate.py student
          python ci/generate_book.py student
          jupyter-book toc migrate /home/runner/work/climate-course-content/climate-course-content/book/_toc.yml -o /home/runner/work/climate-course-content/climate-course-content/book/_toc.yml
          ln -s ../tutorials book/tutorials
          ln -s ../projects book/projects
          # ln -s ../prereqs book/prereqs
          jupyter-book build book
          python ci/parse_html_for_errors.py student

      #     python ci/generate_book_climate.py student
      #     ln -s ../tutorials book/tutorials
      #     ln -s ../projects book/projects
      #     ln -s ../prereqs book/prereqs
      #     jupyter-book build book
      #     python ci/parse_html_for_errors.py student
      # - name: Store Build
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: books
      #     path: book


  # build-projects:
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #         fetch-depth: 0
  #         ref: ${{ github.head_ref }}

  #     - name: Get commit message
  #       run: |
  #         readonly local msg=$(git log -1 --pretty=format:"%s")
  #         echo "COMMIT_MESSAGE=$msg" >> $GITHUB_ENV

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
          
  #     # - name: Install dependencies
  #     #   run: |
  #     #     sudo apt-get install -y libgeos-dev libproj-dev
  #     #
  #     # - name: Set up virtual environment
  #     #   run: |
  #     #     python -m venv env
  #     #     source ./env/bin/activate
          
  #       # BRANCH=`python -c 'import os, re; m = re.search(r"nmaci:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
  #     - name: Install CI tools
  #       run: |
  #         BRANCH="climate"
  #         wget https://github.com/NeuromatchAcademy/nmaci/archive/refs/heads/$BRANCH.tar.gz
  #         tar -xzf $BRANCH.tar.gz
  #         pip install -r nmaci-$BRANCH/requirements.txt
  #         mv nmaci-$BRANCH/scripts/ ci/
  #         rm -r nmaci-$BRANCH
  #         rm -r $BRANCH.tar.gz
  #         echo ci/ >> .gitignore

  #     # - name: Install numpy
  #     #   run: |
  #     #     pip install numpy

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install jupyter-book==0.10.2 ghp-import

  #     # - name: Copy tutorials from precourse repo
  #     #   if: "!contains(env.COMMIT_MESSAGE, 'skip precourse')"
  #     #   run: |
  #     #     BRANCH=`python -c 'import os, re; m = re.search(r"precourse:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
  #     #     wget https://github.com/NeuromatchAcademy/precourse/archive/refs/heads/$BRANCH.tar.gz
  #     #     tar -xzf $BRANCH.tar.gz
  #     #     mv precourse-$BRANCH/tutorials/W0D* tutorials/
  #     #     cat precourse-main/tutorials/materials.yml tutorials/materials.yml > out.yml
  #     #     mv out.yml tutorials/materials.yml
  #     #     mv precourse-$BRANCH/prereqs .
  #     #     rm -r precourse-$BRANCH
  #     #     rm -r $BRANCH.tar.gz
      
  #     - name: Cache Jupyter Build Artifacts
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           ./book/_build/html/
  #           ./.jupyter_cache
  #         key: ${{ runner.os }}-jupyter-${{ hashFiles('**/*.ipynb') }}
  #         restore-keys: |
  #           ${{ runner.os }}-jupyter-

  #     - name: Build student book
  #       run: |
  #         # TODO: get this working with a general CI
  #         python ci/generate_book_climate.py student
  #         mkdir book/tutorials/
  #         ln -s ../tutorials/intro.ipynb book/tutorials/intro.ipynb
  #         ln -s ../projects book/projects
  #         # ln -s ../prereqs book/prereqs
  #         jupyter-book build book
  #         python ci/parse_html_for_errors.py student

  #     #     python ci/generate_book_climate.py student
  #     #     ln -s ../tutorials book/tutorials
  #     #     ln -s ../projects book/projects
  #     #     ln -s ../prereqs book/prereqs
  #     #     jupyter-book build book
  #     #     python ci/parse_html_for_errors.py student
  #     - name: Store Build
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: projects
  #         path: book

  # deploy-book:
    # runs-on: ubuntu-latest
    # needs: [build-books]
    # steps:
      # - name: Retrieve Prereqs
      #   uses: actions/download-artifact@master
      #   with:
      #     name: prereqs
      #     path: _prereqs
      # - name: copy build
      #   run: rsync --remove-source-files _prereqs/ book/

      # - name: Retrieve Tutorials
      #   uses: actions/download-artifact@master
      #   with:
      #     name: tutorials
      #     path: _tutorials
      # - name: copy build
      #   run: rsync --remove-source-files _tutorials/ book/

      # - name: Retrieve Books
      #   uses: actions/download-artifact@master
      #   with:
      #     name: books
      #     path: _books
      # - name: sync build
      #   run: rsync --remove-source-files _books/ book/

      # NOTE: we may be able to push striaght from here. ie skip the last flow
      - name: Commit book
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          ghp-import -n -c "comptools.climatematch.io" -m "Update course book" book/_build/html
          git checkout -f gh-pages
      
      - name: Publish to gh-pages
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          force: true
